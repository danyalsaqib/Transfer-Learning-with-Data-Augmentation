# -*- coding: utf-8 -*-
"""Transfer Learning Task 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WrWRuzhWghvupX5xdBm42CfAgbYoqdri

# **Data Preprocessing and Function Definitions**
"""

# Import the libraries we need for this lab
# Using the following line code to install the torchvision library
# !conda install -y torchvision
 
import torch
import torch.nn as nn
import torchvision
import torchvision.models as models
import torchvision.transforms as transforms
import torchvision.datasets as datasets
import torch.nn.functional as F
import torch.optim as optim
import matplotlib.pylab as plt
import numpy as np
from collections import OrderedDict
from torch.optim import lr_scheduler
import time
import os
import copy
torch.manual_seed(2)
torch.set_grad_enabled(True)

from google.colab import drive, files
drive.mount('/content/drive', force_remount=True)

train_dir = '/content/drive/My Drive/Oranges Dataset/Train'
test_dir = '/content/drive/My Drive/Oranges Dataset/Test'
data_dir = '/content/drive/My Drive/Oranges Dataset/'

# Module for tracking the training process
import tqdm
from tqdm import tqdm_notebook

def train_model(model, criterion, optimizer, scheduler, dataloader_sent, data_size, num_epochs=25):
    dataset_sizes = data_size
    since = time.time()
    dataloaders = dataloader_sent
    best_model_wts = copy.deepcopy(model.state_dict())
    best_acc = 0.0

    for epoch in range(num_epochs):
        print('Epoch {}/{}'.format(epoch, num_epochs - 1))
        print('-' * 10)

        # Each epoch has a training and validation phase
        for phase in ['Train', 'Test']:
            if phase == 'Train':
                model.train()  # Set model to training mode
            else:
                model.eval()   # Set model to evaluate mode

            running_loss = 0.0
            running_corrects = 0

            # Iterate over data.
            for inputs, labels in dataloaders[phase]:
                inputs = inputs.to(device)
                labels = labels.to(device)

                # zero the parameter gradients
                optimizer.zero_grad()

                # forward
                # track history if only in train
                with torch.set_grad_enabled(phase == 'Train'):
                    outputs = model(inputs)
                    _, preds = torch.max(outputs, 1)
                    loss = criterion(outputs, labels)

                    # backward + optimize only if in training phase
                    if phase == 'Train':
                        loss.backward()
                        optimizer.step()

                # statistics
                running_loss += loss.item() * inputs.size(0)
                running_corrects += torch.sum(preds == labels.data)
            if phase == 'Train':
                scheduler.step()

            epoch_loss = running_loss / dataset_sizes[phase]
            epoch_acc = running_corrects.double() / dataset_sizes[phase]

            print('{} Loss: {:.4f} Acc: {:.4f}'.format(
                phase, epoch_loss, epoch_acc))

            # deep copy the model
            if phase == 'Test' and epoch_acc > best_acc:
                best_acc = epoch_acc
                best_model_wts = copy.deepcopy(model.state_dict())

        print()

    time_elapsed = time.time() - since
    print('Training complete in {:.0f}m {:.0f}s'.format(
        time_elapsed // 60, time_elapsed % 60))
    print('Best val Acc: {:4f}'.format(best_acc))

    # load best model weights
    model.load_state_dict(best_model_wts)
    return model

def visualize_model(model, num_images=6):
    was_training = model.training
    model.eval()
    images_so_far = 0
    fig = plt.figure()

    with torch.no_grad():
        for i, (inputs, labels) in enumerate(dataloaders['Test']):
            inputs = inputs.to(device)
            labels = labels.to(device)

            outputs = model(inputs)
            _, preds = torch.max(outputs, 1)

            for j in range(inputs.size()[0]):
                images_so_far += 1
                ax = plt.subplot(num_images//2, 2, images_so_far)
                ax.axis('off')
                ax.set_title('predicted: {}'.format(class_names[preds[j]]))
                imshow(inputs.cpu().data[j])

                if images_so_far == num_images:
                    model.train(mode=was_training)
                    return
        model.train(mode=was_training)

def mergeDict(dict1, dict2):
   ''' Merge dictionaries and keep values of common keys in list'''
   dict3 = {**dict1, **dict2}
   for key, value in dict3.items():
       if key in dict1 and key in dict2:
               dict3[key] = value + dict1[key]
   return dict3

"""# **RESNET**"""

data_transforms = {
    'Train': transforms.Compose([
        transforms.RandomResizedCrop(224),
        transforms.ToTensor(),
        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
    ]),
    'Test': transforms.Compose([
        transforms.Resize(256),
        transforms.CenterCrop(224),
        transforms.ToTensor(),
        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
    ]),
}

data_transforms_2 = {
    'Train': transforms.Compose([
        transforms.RandomResizedCrop(224),
        transforms.RandomHorizontalFlip(),
        transforms.RandomRotation(45),
        transforms.ToTensor(),
        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
    ]),
    'Test': transforms.Compose([
        transforms.Resize(256),
        transforms.CenterCrop(224),
        transforms.ToTensor(),
        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
    ]),
}

data_transforms_3 = {
    'Train': transforms.Compose([
        transforms.RandomResizedCrop(224),
        transforms.RandomAffine(20, translate=(0.3, 0.3), scale=None, shear=0.2, resample=False, fillcolor=0),
        transforms.ToTensor(),
        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
    ]),
    'Test': transforms.Compose([
        transforms.Resize(256),
        transforms.CenterCrop(224),
        transforms.ToTensor(),
        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
    ]),
}

# Creating Dataset
image_datasets = {x: datasets.ImageFolder(os.path.join(data_dir, x),
                                          data_transforms[x])
                  for x in ['Train', 'Test']}
dataloaders = {x: torch.utils.data.DataLoader(image_datasets[x], batch_size=4,
                                             shuffle=True, num_workers=4)
              for x in ['Train', 'Test']}
dataset_sizes = {x: len(image_datasets[x]) for x in ['Train', 'Test']}
print(dataset_sizes)
class_names = image_datasets['Train'].classes

device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")

# Augmented Dataset
image_datasets_im = {x: datasets.ImageFolder(os.path.join(data_dir, x),
                                          data_transforms_3[x])
                  for x in ['Train', 'Test']}

image_datasets_im2 = {x: datasets.ImageFolder(os.path.join(data_dir, x),
                                          data_transforms_2[x])
                  for x in ['Train', 'Test']}
image_datasets_im3 = mergeDict(image_datasets_im, image_datasets_im2)
image_datasets_2 = mergeDict(image_datasets_im3, image_datasets)
dataloaders_2 = {x: torch.utils.data.DataLoader(image_datasets_2[x], batch_size=4,
                                             shuffle=True, num_workers=4)
              for x in ['Train', 'Test']}
dataset_sizes_2 = {x: len(image_datasets_2[x]) for x in ['Train', 'Test']}
print(dataset_sizes_2)
class_names_2 = image_datasets_im['Train'].classes

device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")

# Imshow Function
def imshow(inp, title=None):
    """Imshow for Tensor."""
    inp = inp.numpy().transpose((1, 2, 0))
    mean = np.array([0.485, 0.456, 0.406])
    std = np.array([0.229, 0.224, 0.225])
    inp = std * inp + mean
    inp = np.clip(inp, 0, 1)
    plt.imshow(inp)
    if title is not None:
        plt.title(title)
    plt.pause(0.001)  # pause a bit so that plots are updated


# Get a batch of training data
inputs, classes = next(iter(dataloaders_2['Train']))

# Make a grid from batch
out = torchvision.utils.make_grid(inputs)

imshow(out, title=[class_names_2[x] for x in classes])

"""**Without Augmentation:**"""

model_ft = models.resnet18(pretrained=True)
num_ftrs = model_ft.fc.in_features
# Here the size of each output sample is set to 2.
# Alternatively, it can be generalized to nn.Linear(num_ftrs, len(class_names)).
model_ft.fc = nn.Linear(num_ftrs, 4)

model_ft = model_ft.to(device)

criterion = nn.CrossEntropyLoss()

# Observe that all parameters are being optimized
optimizer_ft = optim.SGD(model_ft.parameters(), lr=0.0005, momentum=0.9)

# Decay LR by a factor of 0.1 every 7 epochs
exp_lr_scheduler = lr_scheduler.StepLR(optimizer_ft, step_size=7, gamma=0.1)

model_ft = train_model(model_ft, criterion, optimizer_ft, exp_lr_scheduler, dataloaders, dataset_sizes, num_epochs=10)

"""**With Augmentation:**"""

model_ft_2 = models.resnet18(pretrained=True)
num_ftrs_2 = model_ft_2.fc.in_features
# Here the size of each output sample is set to 2.
# Alternatively, it can be generalized to nn.Linear(num_ftrs, len(class_names)).
model_ft_2.fc = nn.Linear(num_ftrs_2, 4)

model_ft_2 = model_ft_2.to(device)

criterion_2 = nn.CrossEntropyLoss()

# Observe that all parameters are being optimized
optimizer_ft_2 = optim.SGD(model_ft_2.parameters(), lr=0.0005, momentum=0.9)

# Decay LR by a factor of 0.1 every 7 epochs
exp_lr_scheduler_2 = lr_scheduler.StepLR(optimizer_ft_2, step_size=7, gamma=0.1)

model_ft_2 = train_model(model_ft_2, criterion_2, optimizer_ft_2, exp_lr_scheduler_2, dataloaders_2, dataset_sizes_2, num_epochs=10)

"""# **GoogleNET**"""

google_transforms = {
    'Train': transforms.Compose([
        transforms.RandomResizedCrop(224),
        transforms.ToTensor(),
        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
    ]),
    'Test': transforms.Compose([
        transforms.Resize(256),
        transforms.CenterCrop(224),
        transforms.ToTensor(),
        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
    ]),
}

google_transforms_2 = {
    'Train': transforms.Compose([
        transforms.RandomResizedCrop(224),
        transforms.RandomHorizontalFlip(),
        transforms.RandomRotation(45),
        transforms.ToTensor(),
        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
    ]),
    'Test': transforms.Compose([
        transforms.Resize(256),
        transforms.CenterCrop(224),
        transforms.ToTensor(),
        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
    ]),
}

google_transforms_3 = {
    'Train': transforms.Compose([
        transforms.RandomResizedCrop(224),
        transforms.RandomAffine(20, translate=(0.3, 0.3), scale=None, shear=0.2, resample=False, fillcolor=0),
        transforms.ToTensor(),
        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
    ]),
    'Test': transforms.Compose([
        transforms.Resize(256),
        transforms.CenterCrop(224),
        transforms.ToTensor(),
        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
    ]),
}

# Creating Dataset
google_datasets = {x: datasets.ImageFolder(os.path.join(data_dir, x),
                                          google_transforms[x])
                  for x in ['Train', 'Test']}
google_dataloaders = {x: torch.utils.data.DataLoader(google_datasets[x], batch_size=4,
                                             shuffle=True, num_workers=4)
              for x in ['Train', 'Test']}
google_dataset_sizes = {x: len(google_datasets[x]) for x in ['Train', 'Test']}
google_class_names = google_datasets['Train'].classes

device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")

# Augmented Dataset
google_datasets_im = {x: datasets.ImageFolder(os.path.join(data_dir, x),
                                          google_transforms_3[x])
                  for x in ['Train', 'Test']}

google_datasets_im2 = {x: datasets.ImageFolder(os.path.join(data_dir, x),
                                          google_transforms_2[x])
                  for x in ['Train', 'Test']}
google_datasets_im3 = mergeDict(google_datasets_im, google_datasets_im2)
google_datasets_2 = mergeDict(google_datasets_im3, google_datasets)
google_dataloaders_2 = {x: torch.utils.data.DataLoader(google_datasets_2[x], batch_size=4,
                                             shuffle=True, num_workers=4)
              for x in ['Train', 'Test']}
google_dataset_sizes_2 = {x: len(google_datasets_2[x]) for x in ['Train', 'Test']}
print(google_dataset_sizes_2)
google_class_names_2 = google_datasets_im['Train'].classes

device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")

# Imshow Function
def imshow(inp, title=None):
    """Imshow for Tensor."""
    inp = inp.numpy().transpose((1, 2, 0))
    mean = np.array([0.485, 0.456, 0.406])
    std = np.array([0.229, 0.224, 0.225])
    inp = std * inp + mean
    inp = np.clip(inp, 0, 1)
    plt.imshow(inp)
    if title is not None:
        plt.title(title)
    plt.pause(0.001)  # pause a bit so that plots are updated


# Get a batch of training data
inputs, classes = next(iter(google_dataloaders['Train']))

# Make a grid from batch
out = torchvision.utils.make_grid(inputs)

imshow(out, title=[google_class_names[x] for x in classes])

"""**Without Augmentation:**"""

google_ft = models.resnet18(pretrained=True)
num_ftrs = google_ft.fc.in_features
# Here the size of each output sample is set to 2.
# Alternatively, it can be generalized to nn.Linear(num_ftrs, len(class_names)).
google_ft.fc = nn.Linear(num_ftrs, 4)

google_ft = google_ft.to(device)

criterion = nn.CrossEntropyLoss()

# Observe that all parameters are being optimized
optimizer_ft = optim.SGD(google_ft.parameters(), lr=0.0005, momentum=0.9)

# Decay LR by a factor of 0.1 every 7 epochs
exp_lr_scheduler = lr_scheduler.StepLR(optimizer_ft, step_size=7, gamma=0.1)

google_ft = train_model(google_ft, criterion, optimizer_ft, exp_lr_scheduler, 
                        google_dataloaders, google_dataset_sizes, num_epochs=10)

"""**With Augmentation:**"""

google_ft_2 = models.resnet18(pretrained=True)
num_ftrs = google_ft_2.fc.in_features
# Here the size of each output sample is set to 2.
# Alternatively, it can be generalized to nn.Linear(num_ftrs, len(class_names)).
google_ft_2.fc = nn.Linear(num_ftrs, 4)

google_ft_2 = google_ft_2.to(device)

criterion_2 = nn.CrossEntropyLoss()

# Observe that all parameters are being optimized
optimizer_ft_2 = optim.SGD(google_ft_2.parameters(), lr=0.0005, momentum=0.9)

# Decay LR by a factor of 0.1 every 7 epochs
exp_lr_scheduler_2 = lr_scheduler.StepLR(optimizer_ft, step_size=7, gamma=0.1)

google_ft_2 = train_model(google_ft_2, criterion_2, optimizer_ft_2, exp_lr_scheduler_2,
                          google_dataloaders_2, google_dataset_sizes_2, num_epochs=10)

"""# **SqueezeNET**"""

squeeze_transforms = {
    'Train': transforms.Compose([
        transforms.RandomResizedCrop(224),
        transforms.ToTensor(),
        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
    ]),
    'Test': transforms.Compose([
        transforms.Resize(256),
        transforms.CenterCrop(224),
        transforms.ToTensor(),
        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
    ]),
}

squeeze_transforms_2 = {
    'Train': transforms.Compose([
        transforms.RandomResizedCrop(224),
        transforms.RandomHorizontalFlip(),
        transforms.RandomRotation(45),
        transforms.ToTensor(),
        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
    ]),
    'Test': transforms.Compose([
        transforms.Resize(256),
        transforms.CenterCrop(224),
        transforms.ToTensor(),
        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
    ]),
}

squeeze_transforms_3 = {
    'Train': transforms.Compose([
        transforms.RandomResizedCrop(224),
        transforms.RandomAffine(20, translate=(0.3, 0.3), scale=None, shear=0.2, resample=False, fillcolor=0),
        transforms.ToTensor(),
        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
    ]),
    'Test': transforms.Compose([
        transforms.Resize(256),
        transforms.CenterCrop(224),
        transforms.ToTensor(),
        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
    ]),
}

# Creating Dataset
squeeze_datasets = {x: datasets.ImageFolder(os.path.join(data_dir, x),
                                          squeeze_transforms[x])
                  for x in ['Train', 'Test']}
squeeze_dataloaders = {x: torch.utils.data.DataLoader(squeeze_datasets[x], batch_size=4,
                                             shuffle=True, num_workers=4)
              for x in ['Train', 'Test']}
squeeze_dataset_sizes = {x: len(squeeze_datasets[x]) for x in ['Train', 'Test']}
squeeze_class_names = squeeze_datasets['Train'].classes

device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")

# Augmented Dataset
squeeze_datasets_im = {x: datasets.ImageFolder(os.path.join(data_dir, x),
                                          squeeze_transforms_3[x])
                  for x in ['Train', 'Test']}

squeeze_datasets_im2 = {x: datasets.ImageFolder(os.path.join(data_dir, x),
                                          squeeze_transforms_2[x])
                  for x in ['Train', 'Test']}
squeeze_datasets_im3 = mergeDict(squeeze_datasets_im, squeeze_datasets_im2)
squeeze_datasets_2 = mergeDict(squeeze_datasets_im3, squeeze_datasets)

squeeze_dataloaders_2 = {x: torch.utils.data.DataLoader(squeeze_datasets_2[x], batch_size=4,
                                             shuffle=True, num_workers=4)
              for x in ['Train', 'Test']}
squeeze_dataset_sizes_2 = {x: len(squeeze_datasets_2[x]) for x in ['Train', 'Test']}
squeeze_class_names_2 = squeeze_datasets_im['Train'].classes

device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")

# Imshow Function
def imshow(inp, title=None):
    """Imshow for Tensor."""
    inp = inp.numpy().transpose((1, 2, 0))
    mean = np.array([0.485, 0.456, 0.406])
    std = np.array([0.229, 0.224, 0.225])
    inp = std * inp + mean
    inp = np.clip(inp, 0, 1)
    plt.imshow(inp)
    if title is not None:
        plt.title(title)
    plt.pause(0.001)  # pause a bit so that plots are updated


# Get a batch of training data
inputs, classes = next(iter(squeeze_dataloaders['Train']))

# Make a grid from batch
out = torchvision.utils.make_grid(inputs)

imshow(out, title=[squeeze_class_names[x] for x in classes])

"""**Without Augmentation:**"""

squeeze_ft = models.squeezenet1_0(pretrained=True)
print(squeeze_ft)

# Here the size of each output sample is set to 2
# Alternatively, it can be generalized to nn.Linear(num_ftrs, len(class_names)).
squeeze_ft.classifier[1] = nn.Conv2d(512, 4, kernel_size=(1,1), stride=(1,1))
print(squeeze_ft)
squeeze_ft = squeeze_ft.to(device)

criterion = nn.CrossEntropyLoss()

# Observe that all parameters are being optimized
optimizer_ft = optim.SGD(squeeze_ft.parameters(), lr=0.0005, momentum=0.9)

# Decay LR by a factor of 0.1 every 7 epochs
exp_lr_scheduler = lr_scheduler.StepLR(optimizer_ft, step_size=7, gamma=0.1)

squeeze_ft = train_model(squeeze_ft, criterion, optimizer_ft, exp_lr_scheduler,
                         squeeze_dataloaders, squeeze_dataset_sizes, num_epochs=10)

"""**With Augmentation:**"""

squeeze_ft_2 = models.squeezenet1_0(pretrained=True)

# Here the size of each output sample is set to 2.
# Alternatively, it can be generalized to nn.Linear(num_ftrs, len(class_names)).
squeeze_ft_2.classifier[1] = nn.Conv2d(512, 4, kernel_size=(1,1), stride=(1,1))

squeeze_ft_2 = squeeze_ft_2.to(device)

criterion_2 = nn.CrossEntropyLoss()

# Observe that all parameters are being optimized
optimizer_ft_2 = optim.SGD(squeeze_ft_2.parameters(), lr=0.0005, momentum=0.9)

# Decay LR by a factor of 0.1 every 7 epochs
exp_lr_scheduler_2 = lr_scheduler.StepLR(optimizer_ft, step_size=7, gamma=0.1)

squeeze_ft_2 = train_model(squeeze_ft_2, criterion_2, optimizer_ft_2, exp_lr_scheduler_2,
                           squeeze_dataloaders_2, squeeze_dataset_sizes_2, num_epochs=10)

"""# **AlexNET**"""

alex_transforms = {
    'Train': transforms.Compose([
        transforms.RandomResizedCrop(256),
        transforms.ToTensor(),
        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
    ]),
    'Test': transforms.Compose([
        transforms.Resize(256),
        transforms.CenterCrop(256),
        transforms.ToTensor(),
        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
    ]),
}

alex_transforms_2 = {
    'Train': transforms.Compose([
        transforms.RandomResizedCrop(256),
        transforms.RandomHorizontalFlip(),
        transforms.RandomRotation(45),
        transforms.ToTensor(),
        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
    ]),
    'Test': transforms.Compose([
        transforms.Resize(256),
        transforms.CenterCrop(256),
        transforms.ToTensor(),
        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
    ]),
}

alex_transforms_3 = {
    'Train': transforms.Compose([
        transforms.RandomResizedCrop(256),
        transforms.RandomAffine(20, translate=(0.3, 0.3), scale=None, shear=0.2, resample=False, fillcolor=0),
        transforms.ToTensor(),
        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
    ]),
    'Test': transforms.Compose([
        transforms.Resize(256),
        transforms.CenterCrop(256),
        transforms.ToTensor(),
        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
    ]),
}

# Creating Dataset
alex_datasets = {x: datasets.ImageFolder(os.path.join(data_dir, x),
                                          alex_transforms[x])
                  for x in ['Train', 'Test']}
alex_dataloaders = {x: torch.utils.data.DataLoader(alex_datasets[x], batch_size=4,
                                             shuffle=True, num_workers=4)
              for x in ['Train', 'Test']}
alex_dataset_sizes = {x: len(alex_datasets[x]) for x in ['Train', 'Test']}
alex_class_names = alex_datasets['Train'].classes

device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")

# Augmented Dataset
alex_datasets_im = {x: datasets.ImageFolder(os.path.join(data_dir, x),
                                          alex_transforms_3[x])
                  for x in ['Train', 'Test']}

alex_datasets_im2 = {x: datasets.ImageFolder(os.path.join(data_dir, x),
                                          alex_transforms_2[x])
                  for x in ['Train', 'Test']}
alex_datasets_im3 = mergeDict(alex_datasets_im, alex_datasets_im2)
alex_datasets_2 = mergeDict(alex_datasets_im3, alex_datasets)

alex_dataloaders_2 = {x: torch.utils.data.DataLoader(alex_datasets_2[x], batch_size=4,
                                             shuffle=True, num_workers=4)
              for x in ['Train', 'Test']}
alex_dataset_sizes_2 = {x: len(alex_datasets_2[x]) for x in ['Train', 'Test']}
alex_class_names_2 = alex_datasets_im['Train'].classes

device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")

# Imshow Function
def imshow(inp, title=None):
    """Imshow for Tensor."""
    inp = inp.numpy().transpose((1, 2, 0))
    mean = np.array([0.485, 0.456, 0.406])
    std = np.array([0.229, 0.224, 0.225])
    inp = std * inp + mean
    inp = np.clip(inp, 0, 1)
    plt.imshow(inp)
    if title is not None:
        plt.title(title)
    plt.pause(0.001)  # pause a bit so that plots are updated


# Get a batch of training data
inputs, classes = next(iter(alex_dataloaders['Train']))

# Make a grid from batch
out = torchvision.utils.make_grid(inputs)

imshow(out, title=[alex_class_names[x] for x in classes])

"""**Without Augmentation:**"""

alex_ft = models.alexnet(pretrained=True)

# Here the size of each output sample is set to 2.
# Alternatively, it can be generalized to nn.Linear(num_ftrs, len(class_names)).
alex_ft.classifier[6] = nn.Linear(4096, 4)

alex_ft = alex_ft.to(device)

criterion = nn.CrossEntropyLoss()

# Observe that all parameters are being optimized
optimizer_ft = optim.SGD(alex_ft.parameters(), lr=0.0005, momentum=0.9)

# Decay LR by a factor of 0.1 every 7 epochs
exp_lr_scheduler = lr_scheduler.StepLR(optimizer_ft, step_size=7, gamma=0.1)

alex_ft = train_model(alex_ft, criterion, optimizer_ft, exp_lr_scheduler, 
                        alex_dataloaders, alex_dataset_sizes, num_epochs=10)

"""**With Augmentation:**"""

alex_ft_2 = models.alexnet(pretrained=True)

# Here the size of each output sample is set to 2.
# Alternatively, it can be generalized to nn.Linear(num_ftrs, len(class_names)).
alex_ft_2.classifier[6] = nn.Linear(4096,4)

alex_ft_2 = alex_ft_2.to(device)

criterion_2 = nn.CrossEntropyLoss()

# Observe that all parameters are being optimized
optimizer_ft_2 = optim.SGD(alex_ft_2.parameters(), lr=0.0005, momentum=0.9)

# Decay LR by a factor of 0.1 every 7 epochs
exp_lr_scheduler_2 = lr_scheduler.StepLR(optimizer_ft, step_size=7, gamma=0.1)

alex_ft_2 = train_model(alex_ft_2, criterion_2, optimizer_ft_2, exp_lr_scheduler_2,
                          alex_dataloaders_2, alex_dataset_sizes_2, num_epochs=10)